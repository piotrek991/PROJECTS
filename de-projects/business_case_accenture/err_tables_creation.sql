-- DELETE FROM TABLES IF NEDEED
DELETE FROM LOAN;
DELETE FROM HOUSEHOLD;
DELETE FROM INCOME;
DELETE FROM CLIENT;

--UPDATE DATES IN RAW TABLES IF NEDEED
UPDATE RAW_HOUSEHOLD
SET REPORTING_DATE = substr(REPORTING_DATE, 7, 4) || '-' || substr(REPORTING_DATE, 4, 2) || '-' || substr(REPORTING_DATE, 1, 2);
UPDATE RAW_INCOME
SET REPORTING_DATE = substr(REPORTING_DATE, 7, 4) || '-' || substr(REPORTING_DATE, 4, 2) || '-' || substr(REPORTING_DATE, 1, 2);
UPDATE RAW_CLIENT
SET REPORTING_DATE = substr(REPORTING_DATE, 7, 4) || '-' || substr(REPORTING_DATE, 4, 2) || '-' || substr(REPORTING_DATE, 1, 2);


------------------------------------------------------------------------------------------------------------
------------------------------------ RAW CLIENT CHECK ------------------------------------------------------
------------------------------------------------------------------------------------------------------------
DROP VIEW IF EXISTS RAW_CLIENT_CHECK;
CREATE VIEW RAW_CLIENT_CHECK
AS
WITH PRIMARY_CHECK AS(
    SELECT CUSTOMER_ID, REPORTING_DATE, COUNT(*) HOW_MANY
    FROM RAW_CLIENT
    GROUP BY CUSTOMER_ID, REPORTING_DATE
    HAVING COUNT(*) > 1
)

SELECT BB.CUSTOMER_ID
, BB.REPORTING_DATE
, BB.EDUCATION
, BB.AGE
, BB.BUCKET
, CASE WHEN BB.NULL_CHECK != 'GOOD' THEN 1 ELSE 0 END NULL_CHECK
, CASE WHEN  BB.PRIMARY_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END PRIMARY_KEY_CHECK
, CASE WHEN  BB.DATE_CHECK != 'GOOD' THEN 1 ELSE 0 END DATE_CHECK
, CASE WHEN BB.PRIMARY_KEY_CHECK != 'GOOD'
    OR BB.INTEGER_POSITIVE_CHECK != 'GOOD'
    OR  BB.NULL_CHECK != 'GOOD'
    OR  BB.AGE_CHECK != 'GOOD'
    OR  BB.EDUCATION_CHECK != 'GOOD' 
    THEN 1 ELSE 0 END ERR_CHECK
, INTEGER_POSITIVE_CHECK || char(09) || NULL_CHECK || char(09) || AGE_CHECK || char(09) || EDUCATION_CHECK || char(09) || PRIMARY_KEY_CHECK || char(09) || DATE_CHECK ERR_MSG
FROM (
SELECT A.*
, CASE WHEN B.CUSTOMER_ID IS NOT NULL THEN 'PRIMARY KEY ERROR' ELSE 'GOOD' END PRIMARY_KEY_CHECK
, CASE WHEN cast(cast(A.customer_id AS INTEGER) AS TEXT) != A.customer_id or CAST(A.customer_id AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.BUCKET AS INTEGER) AS TEXT) != A.BUCKET or CAST(A.BUCKET AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    ELSE 'GOOD' END INTEGER_POSITIVE_CHECK
, CASE WHEN A.CUSTOMER_ID IS NULL OR A.REPORTING_DATE IS NULL OR A.AGE IS NULL
    OR A.EDUCATION IS NULL OR A.BUCKET IS NULL THEN 'NULL IN ROW'
    ELSE 'GOOD' END NULL_CHECK
, CASE WHEN STRFTIME('%d',A.REPORTING_DATE) IS NULL THEN 'NOT PROPER DATE FORMAT' ELSE 'GOOD' END DATE_CHECK
, CASE WHEN CAST(A.AGE AS INT) NOT BETWEEN 18 AND 100 THEN 'AGE NOT IN RANGE IN ROW' ELSE 'GOOD' END AGE_CHECK
, CASE WHEN A.EDUCATION NOT IN ('Secondary','Elementary', 'Higher Education') THEN 'UNSUPPORTED VALUE IN EDUCATION' ELSE 'GOOD'
    END EDUCATION_CHECK
FROM RAW_CLIENT A
LEFT JOIN PRIMARY_CHECK B
    ON A.CUSTOMER_ID = B.CUSTOMER_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
) BB;

 -- INSERT INTO DESIRED TABLE
INSERT INTO CLIENT
SELECT A.CUSTOMER_ID
, A.REPORTING_DATE
, A.EDUCATION
, A.AGE
, A.BUCKET
FROM RAW_CLIENT_CHECK A
LEFT JOIN CLIENT B
    ON A.CUSTOMER_ID = B.CUSTOMER_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
WHERE B.CUSTOMER_ID IS NULL AND A.ERR_CHECK != 1;

-----------------------------------------------------------------------------------------------------------
-------------------------------------------- RAW INCOME ---------------------------------------------------
-----------------------------------------------------------------------------------------------------------
DROP VIEW IF EXISTS RAW_INCOME_CHECK;
CREATE VIEW RAW_INCOME_CHECK
AS
WITH PRIMARY_CHECK AS (
    SELECT INCOME_ID, REPORTING_DATE, COUNT(*) HOW_MANY
    FROM RAW_INCOME
    GROUP BY INCOME_ID, REPORTING_DATE
    HAVING COUNT(*) > 1
)
, FOREIGN_KEY_CHECK AS (
    SELECT A.CUSTOMER_ID CUST_MAIN ,A.REPORTING_DATE REPORT_MAIN
    , B.CUSTOMER_ID CUST_REF, B.REPORTING_DATE REPORT_REF
    FROM RAW_INCOME A
    LEFT JOIN CLIENT B
        ON A.CUSTOMER_ID = B.CUSTOMER_ID
        AND A.REPORTING_DATE = B.REPORTING_DATE
)

SELECT BB.INCOME_ID
, BB.CUSTOMER_ID
, BB.REPORTING_DATE
, BB.FIRST_JOB
, BB.INCOME
, BB.BUCKET
, CASE WHEN BB.NULL_CHECK != 'GOOD' THEN 1 ELSE 0 END NULL_CHECK
, CASE WHEN  BB.PRIMARY_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END PRIMARY_KEY_CHECK
, CASE WHEN BB.FOREIGN_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END FOREIGN_KEY_CHECK
, CASE WHEN  BB.DATE_CHECK != 'GOOD' THEN 1 ELSE 0 END DATE_CHECK
, CASE WHEN BB.PRIMARY_KEY_CHECK != 'GOOD'
    OR BB.FOREIGN_KEY_CHECK != 'GOOD'
    OR BB.INTEGER_POSITIVE_CHECK != 'GOOD'
    OR  BB.NULL_CHECK != 'GOOD'
    OR  BB.INCOME_CHECK != 'GOOD'
    OR  BB.FIRST_JOB_CHECK != 'GOOD' 
    THEN 1 ELSE 0 END ERR_CHECK
, INTEGER_POSITIVE_CHECK || char(09) || NULL_CHECK || char(09) || INCOME_CHECK || char(09) || FIRST_JOB_CHECK || char(09) || PRIMARY_KEY_CHECK || char(09) || FOREIGN_KEY_CHECK || char(09) || DATE_CHECK ERR_MSG
FROM (
SELECT A.*
, CASE WHEN B.INCOME_ID IS NOT NULL THEN 'PRIMARY KEY ERROR' ELSE 'GOOD' END PRIMARY_KEY_CHECK
, CASE WHEN C.CUST_REF IS NULL THEN 'FOREIGN KEY ERROR' ELSE 'GOOD' END FOREIGN_KEY_CHECK
, CASE WHEN cast(cast(A.INCOME_ID AS INTEGER) AS TEXT) != A.INCOME_ID or CAST(A.INCOME_ID AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.CUSTOMER_ID AS INTEGER) AS TEXT) != A.CUSTOMER_ID or CAST(A.CUSTOMER_ID AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.BUCKET AS INTEGER) AS TEXT) != A.BUCKET or CAST(A.BUCKET AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    ELSE 'GOOD' END INTEGER_POSITIVE_CHECK
, CASE WHEN A.INCOME_ID IS NULL OR A.REPORTING_DATE IS NULL OR A.CUSTOMER_ID IS NULL
    OR A.FIRST_JOB IS NULL OR A.INCOME IS NULL OR A.BUCKET IS NULL THEN 'NULL IN ROW'
    ELSE 'GOOD' END NULL_CHECK
, CASE WHEN STRFTIME('%d',A.REPORTING_DATE) IS NULL THEN 'NOT PROPER DATE FORMAT' ELSE 'GOOD' END DATE_CHECK
, CASE WHEN CAST(A.INCOME AS INT) NOT BETWEEN 1000 AND 30000 THEN 'INCOME NOT IN RANGE IN ROW' ELSE 'GOOD' END INCOME_CHECK
, CASE WHEN A.FIRST_JOB NOT IN ('Y','N') THEN 'UNSUPPORTED VALUE IN FIRST_JOB' ELSE 'GOOD'
    END FIRST_JOB_CHECK
FROM RAW_INCOME A
LEFT JOIN PRIMARY_CHECK B
    ON A.INCOME_ID = B.INCOME_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
LEFT JOIN FOREIGN_KEY_CHECK C
    ON A.CUSTOMER_ID = C.CUST_MAIN
    AND A.REPORTING_DATE = C.REPORT_MAIN
) BB;


INSERT INTO INCOME
SELECT  A.INCOME_ID
, A.CUSTOMER_ID
, A.REPORTING_DATE
, A.FIRST_JOB
, A.INCOME
, A.BUCKET
FROM RAW_INCOME_CHECK A
LEFT JOIN INCOME B
    ON A.INCOME_ID = B.INCOME_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
WHERE B.CUSTOMER_ID IS NULL AND A.ERR_CHECK != 1;

-----------------------------------------------------------------------------------------------------------
-------------------------------------------- RAW HOUSEHOLD ---------------------------------------------------
-----------------------------------------------------------------------------------------------------------
DROP VIEW IF EXISTS RAW_HOUSEHOLD_CHECK;
CREATE VIEW RAW_HOUSEHOLD_CHECK
AS
WITH PRIMARY_CHECK AS (
    SELECT HOUSEHOLD_ID, REPORTING_DATE, COUNT(*) HOW_MANY
    FROM RAW_HOUSEHOLD
    GROUP BY HOUSEHOLD_ID, REPORTING_DATE
    HAVING COUNT(*) > 1
)
, FOREIGN_KEY_CHECK AS (
    SELECT A.INCOME_ID INC_MAIN ,A.REPORTING_DATE REPORT_MAIN
    , B.INCOME_ID INC_REF, B.REPORTING_DATE REPORT_REF
    FROM RAW_HOUSEHOLD A
    LEFT JOIN INCOME B
        ON A.INCOME_ID = B.INCOME_ID
        AND A.REPORTING_DATE = B.REPORTING_DATE
)

SELECT BB.HOUSEHOLD_ID
, BB.INCOME_ID
, BB.REPORTING_DATE
, BB.MARRIED
, BB.HOUSE_OWNER
, BB.CHILD_NO
, BB.HH_MEMBERS
, BB.BUCKET
, CASE WHEN BB.NULL_CHECK != 'GOOD' THEN 1 ELSE 0 END NULL_CHECK
, CASE WHEN  BB.PRIMARY_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END PRIMARY_KEY_CHECK
, CASE WHEN BB.FOREIGN_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END FOREIGN_KEY_CHECK
, CASE WHEN  BB.DATE_CHECK != 'GOOD' THEN 1 ELSE 0 END DATE_CHECK
,CASE WHEN BB.PRIMARY_KEY_CHECK != 'GOOD'
    OR BB.FOREIGN_KEY_CHECK != 'GOOD'
    OR BB.INTEGER_POSITIVE_CHECK != 'GOOD'
    OR  BB.NULL_CHECK != 'GOOD'
    OR  BB.CHILD_NO_CHECK != 'GOOD'
    OR  BB.HH_MEMBERS_CHECK != 'GOOD' 
    OR  BB.MARRIED_CHECK != 'GOOD' 
    OR  BB.HOUSE_OWNER_CHECK != 'GOOD' 
    THEN 1 ELSE 0 END ERR_CHECK
, INTEGER_POSITIVE_CHECK || char(09) || NULL_CHECK || char(09) || MARRIED_CHECK || char(09) || HOUSE_OWNER_CHECK || char(09) || PRIMARY_KEY_CHECK || char(09) || CHILD_NO_CHECK || char(09) || FOREIGN_KEY_CHECK || char(09) || HH_MEMBERS_CHECK || char(09) || DATE_CHECK ERR_MSG
FROM (
SELECT A.*
, CASE WHEN B.HOUSEHOLD_ID IS NOT NULL THEN 'PRIMARY KEY ERROR' ELSE 'GOOD' END PRIMARY_KEY_CHECK
, CASE WHEN C.INC_REF IS NULL THEN 'FOREIGN KEY ERROR' ELSE 'GOOD' END FOREIGN_KEY_CHECK
, CASE WHEN cast(cast(A.INCOME_ID AS INTEGER) AS TEXT) != A.INCOME_ID or CAST(A.INCOME_ID AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.HOUSEHOLD_ID AS INTEGER) AS TEXT) != A.HOUSEHOLD_ID or CAST(A.HOUSEHOLD_ID AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.BUCKET AS INTEGER) AS TEXT) != A.BUCKET or CAST(A.BUCKET AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    ELSE 'GOOD' END INTEGER_POSITIVE_CHECK
, CASE WHEN A.HOUSEHOLD_ID IS NULL OR A.REPORTING_DATE IS NULL OR A.INCOME_ID IS NULL
    OR A.MARRIED IS NULL OR A.HOUSE_OWNER IS NULL OR A.BUCKET IS NULL OR A.CHILD_NO IS NULL OR HH_MEMBERS IS NULL THEN 'NULL IN ROW'
    ELSE 'GOOD' END NULL_CHECK
, CASE WHEN STRFTIME('%d',A.REPORTING_DATE) IS NULL THEN 'NOT PROPER DATE FORMAT' ELSE 'GOOD' END DATE_CHECK
, CASE WHEN CAST(A.CHILD_NO AS INT) NOT BETWEEN 0 AND 10 THEN 'CHILD_NO NOT IN RANGE IN ROW' ELSE 'GOOD' END CHILD_NO_CHECK
, CASE WHEN CAST(A.HH_MEMBERS AS INT) NOT BETWEEN 1 AND 10 THEN 'HH_MEMBERS NOT IN RANGE IN ROW' ELSE 'GOOD' END HH_MEMBERS_CHECK
, CASE WHEN A.MARRIED NOT IN ('Y','N') THEN 'UNSUPPORTED VALUE IN MARRIED' ELSE 'GOOD' END MARRIED_CHECK
, CASE WHEN A.HOUSE_OWNER NOT IN ('Y','N') THEN 'UNSUPPORTED VALUE IN HOUSE_OWNER' ELSE 'GOOD'
    END HOUSE_OWNER_CHECK
FROM RAW_HOUSEHOLD A
LEFT JOIN PRIMARY_CHECK B
    ON A.HOUSEHOLD_ID = B.HOUSEHOLD_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
LEFT JOIN FOREIGN_KEY_CHECK C
    ON A.INCOME_ID = C.INC_MAIN
    AND A.REPORTING_DATE = C.REPORT_MAIN
) BB;


INSERT INTO HOUSEHOLD
SELECT  A.HOUSEHOLD_ID
, A.INCOME_ID
, A.REPORTING_DATE
, A.MARRIED
, A.HOUSE_OWNER
, A.BUCKET
, A.CHILD_NO
, A.HH_MEMBERS
FROM RAW_HOUSEHOLD_CHECK A
LEFT JOIN HOUSEHOLD B
    ON A.HOUSEHOLD_ID = B.HOUSEHOLD_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
WHERE B.HOUSEHOLD_ID IS NULL AND A.ERR_CHECK != 1;

-----------------------------------------------------------------------------------------------------------
-------------------------------------------- RAW LOAN -----------------------------------------------------
-----------------------------------------------------------------------------------------------------------
DROP VIEW IF EXISTS RAW_LOAN_CHECK;
CREATE VIEW RAW_LOAN_CHECK
AS
WITH PRIMARY_CHECK AS (
    SELECT LOAN_ID, REPORTING_DATE, COUNT(*) HOW_MANY
    FROM RAW_LOAN
    GROUP BY LOAN_ID, REPORTING_DATE
    HAVING COUNT(*) > 1
)
, FOREIGN_KEY_CHECK AS (
    SELECT A.CUSTOMER_ID CUST_MAIN ,A.REPORTING_DATE REPORT_MAIN
    , B.CUSTOMER_ID CUST_REF, B.REPORTING_DATE REPORT_REF
    FROM RAW_LOAN A
    LEFT JOIN CLIENT B
        ON A.CUSTOMER_ID = B.CUSTOMER_ID
        AND A.REPORTING_DATE = B.REPORTING_DATE
)

SELECT BB.LOAN_ID
, BB.CUSTOMER_ID
, BB.REPORTING_DATE
, BB.INTODEFAULT
, BB.INSTALLMENT_NM
, BB.LOAN_AMT
, BB.INSTALLMENT_AMT
, BB.PAST_DUE_AMT
, BB.BUCKET
, CASE WHEN BB.NULL_CHECK != 'GOOD' THEN 1 ELSE 0 END NULL_CHECK
, CASE WHEN  BB.PRIMARY_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END PRIMARY_KEY_CHECK
, CASE WHEN BB.FOREIGN_KEY_CHECK != 'GOOD' THEN 1 ELSE 0 END FOREIGN_KEY_CHECK
, CASE WHEN  BB.DATE_CHECK != 'GOOD' THEN 1 ELSE 0 END DATE_CHECK
,CASE WHEN BB.PRIMARY_KEY_CHECK != 'GOOD'
    OR BB.FOREIGN_KEY_CHECK != 'GOOD'
    OR BB.INTEGER_POSITIVE_CHECK != 'GOOD'
    OR  BB.NULL_CHECK != 'GOOD'
    OR  BB.INSTALLMENT_NM_CHECK != 'GOOD'
    OR  BB.INSTALLMENT_AMT_CHECK != 'GOOD' 
    OR  BB.LOAN_AMT_CHECK != 'GOOD' 
    OR  BB.PAST_DUE_AMT_CHECK != 'GOOD' 
    OR  BB.INTODEFAULT_CHECK != 'GOOD'
    THEN 1 ELSE 0 END ERR_CHECK
, INTEGER_POSITIVE_CHECK || char(09) || NULL_CHECK || char(09) || INSTALLMENT_NM_CHECK || char(09) || INSTALLMENT_AMT_CHECK || char(09) || PRIMARY_KEY_CHECK || char(09) || LOAN_AMT_CHECK || char(09) || FOREIGN_KEY_CHECK || char(09) || PAST_DUE_AMT_CHECK || char(09) || INTODEFAULT_CHECK || char(09) || DATE_CHECK ERR_MSG
FROM (
SELECT A.*
, CASE WHEN B.LOAN_ID IS NOT NULL THEN 'PRIMARY KEY ERROR' ELSE 'GOOD' END PRIMARY_KEY_CHECK
, CASE WHEN C.CUST_REF IS NULL THEN 'FOREIGN KEY ERROR' ELSE 'GOOD' END FOREIGN_KEY_CHECK
, CASE WHEN cast(cast(A.LOAN_ID AS INTEGER) AS TEXT) != A.LOAN_ID or CAST(A.LOAN_ID AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.CUSTOMER_ID AS INTEGER) AS TEXT) != A.CUSTOMER_ID or CAST(A.CUSTOMER_ID AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    WHEN cast(cast(A.BUCKET AS INTEGER) AS TEXT) != A.BUCKET or CAST(A.BUCKET AS INT) <= 0 THEN 'NOT INTEGER OR BELOW 0 IN ROW'
    ELSE 'GOOD' END INTEGER_POSITIVE_CHECK
, CASE WHEN A.LOAN_ID IS NULL OR A.REPORTING_DATE IS NULL OR A.CUSTOMER_ID IS NULL
    OR A.INTODEFAULT IS NULL OR A.INSTALLMENT_AMT IS NULL OR A.LOAN_AMT IS NULL OR A.INSTALLMENT_NM IS NULL OR A.PAST_DUE_AMT IS NULL OR A.BUCKET IS NULL THEN 'NULL IN ROW'
    ELSE 'GOOD' END NULL_CHECK
, CASE WHEN STRFTIME('%d',A.REPORTING_DATE) IS NULL THEN 'NOT PROPER DATE FORMAT' ELSE 'GOOD' END DATE_CHECK
, CASE WHEN CAST(A.INSTALLMENT_NM AS INT) NOT BETWEEN 12 AND 72 THEN 'INSTALLMENT_NM NOT IN RANGE IN ROW' ELSE 'GOOD' END INSTALLMENT_NM_CHECK
, CASE WHEN CAST(A.INSTALLMENT_AMT AS DECIMAL) NOT BETWEEN 10 AND 100000 THEN 'INSTALLMENT_AMT NOT IN RANGE IN ROW' ELSE 'GOOD' END INSTALLMENT_AMT_CHECK
, CASE WHEN CAST(A.LOAN_AMT AS DECIMAL) NOT BETWEEN 500 AND 100000 THEN 'LOAN_AMT NOT IN RANGE IN ROW' ELSE 'GOOD' END LOAN_AMT_CHECK
, CASE WHEN CAST(A.PAST_DUE_AMT AS DECIMAL) < 0 THEN 'PAST_DUE_AMT NOT IN RANGE IN ROW' ELSE 'GOOD' END PAST_DUE_AMT_CHECK
, CASE WHEN A.INTODEFAULT NOT IN ('Y','N') THEN 'UNSUPPORTED VALUE IN INTODEFAULT' ELSE 'GOOD' END INTODEFAULT_CHECK
FROM RAW_LOAN A
LEFT JOIN PRIMARY_CHECK B
    ON A.LOAN_ID = B.LOAN_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
LEFT JOIN FOREIGN_KEY_CHECK C
    ON A.CUSTOMER_ID = C.CUST_MAIN
    AND A.REPORTING_DATE = C.REPORT_MAIN
) BB;


INSERT INTO LOAN
SELECT  A.LOAN_ID
, A.CUSTOMER_ID
, A.REPORTING_DATE
, A.INTODEFAULT
, A.INSTALLMENT_NM
, A.LOAN_AMT
, A.INSTALLMENT_AMT
, A.PAST_DUE_AMT
, A.BUCKET
FROM RAW_LOAN_CHECK A
LEFT JOIN LOAN B
    ON A.LOAN_ID = B.LOAN_ID
    AND A.REPORTING_DATE = B.REPORTING_DATE
WHERE B.LOAN_ID IS NULL AND A.ERR_CHECK != 1;



--------------------------------------------------------------------------------------------
---------------------------------- CALCULATE METRICS ---------------------------------------
--------------------------------------------------------------------------------------------
DROP VIEW IF EXISTS METRICS_RPT;
CREATE VIEW METRICS_RPT
AS
SELECT 'HOUSEHOLD' AS TAB_NAME, (SUM(CAST(NULL_CHECK AS INTEGER))/ COUNT(*))*100 '%_NULL'
, (SUM(CAST(PRIMARY_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_DUPLICATES'
, (SUM(CAST(FOREIGN_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_REFERENCES_ERR'
, (SUM(CAST(DATE_CHECK AS INTEGER))/ COUNT(*))*100 '%_DATE_ERR'
, (SUM(CAST(ERR_CHECK AS INTEGER))/ COUNT(*))*100 '%_ERR'
FROM RAW_HOUSEHOLD_CHECK
UNION ALL
SELECT 'CLIENT' AS TAB_NAME, (SUM(CAST(NULL_CHECK AS INTEGER))/ COUNT(*))*100 '%_NULL'
, (SUM(CAST(PRIMARY_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_DUPLICATES'
, NULL
, (SUM(CAST(DATE_CHECK AS INTEGER))/ COUNT(*))*100 '%_DATE_ERR'
, (SUM(CAST(ERR_CHECK AS INTEGER))/ COUNT(*))*100 '%_ERR'
FROM RAW_CLIENT_CHECK
UNION ALL
SELECT 'INCOME' AS TAB_NAME, (SUM(CAST(NULL_CHECK AS INTEGER))/ COUNT(*))*100 '%_NULL'
, (SUM(CAST(PRIMARY_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_DUPLICATES'
, (SUM(CAST(FOREIGN_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_REFERENCES_ERR'
, (SUM(CAST(DATE_CHECK AS INTEGER))/ COUNT(*))*100 '%_DATE_ERR'
, (SUM(CAST(ERR_CHECK AS INTEGER))/ COUNT(*))*100 '%_ERR'
FROM RAW_INCOME_CHECK
UNION ALL
SELECT 'LOAN' AS TAB_NAME, (SUM(CAST(NULL_CHECK AS INTEGER))/ COUNT(*))*100 '%_NULL'
, (SUM(CAST(PRIMARY_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_DUPLICATES'
, (SUM(CAST(FOREIGN_KEY_CHECK AS INTEGER))/ COUNT(*))*100 '%_REFERENCES_ERR'
, (SUM(CAST(DATE_CHECK AS INTEGER))/ COUNT(*))*100 '%_DATE_ERR'
, (SUM(CAST(ERR_CHECK AS INTEGER))/ COUNT(*))*100 '%_ERR'
FROM RAW_LOAN_CHECK